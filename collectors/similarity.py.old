#!/usr/bin/env python3.5
import json
import os
import shutil
import subprocess
import time
import itertools


_experiment_dir = '/home/jnejati/PLTSpeed/desktop_b5d100-mo'
def find_similarity_ratio(f1, f2):
    ratio = 0
    with open(f1) as data_file1:
        data1 = json.load(data_file1)[1:-3] # ignoring painting, rendering and deps for now.
    with open(f2) as data_file2:
        data2 = json.load(data_file2)[1:-3]
    _total_event_count = 0 
    for o in data1:
        _total_event_count = _total_event_count + len(o['objs'])
    #print(f1 + ' ' + str(_total_event_count))
    if len(data1) == len(data2):
        for obj1 in data1:
            for obj2 in data2:
                if obj1['id'] == obj2['id']:
                    if len(obj1['objs']) == len(obj2['objs']):
                        for i in range(len(obj1['objs'])):
                             if obj1['objs'][i][0].split('_')[0] ==  obj2['objs'][i][0].split('_')[0]:
                                 e_time1 = obj1['objs'][i][1]['endTime']
                                 s_time1 = obj1['objs'][i][1]['startTime']
                                 e_time2 = obj2['objs'][i][1]['endTime']
                                 s_time2 = obj2['objs'][i][1]['startTime']
                                 if e_time1 > 0 and s_time1 > 0 and e_time2 > 0 and s_time2 > 0:
                                     time1 = e_time1 - s_time1
                                     time2 = e_time2 - s_time2
                                     if time1 >= time2 and time1 > 0 and time2 > 0:
                                         ratio += round(abs(time1 - time2) / time1, 2)
                                     elif time1 < time2:
                                         ratio += round(abs(time1 - time2) / time2, 2)
                             else:
                                 print('obj mistmatch inside events')
                                 return None     
                    else:
                        print('#objs mistmatch')
                        return None
        return round(ratio/_total_event_count, 2)
    else: 
        print('Length mismatch')
        return None
for _site_dir in os.listdir(_experiment_dir):
    _site_dir = os.path.join(_experiment_dir, _site_dir)
    _runs = [x for x in os.listdir(_site_dir) if x.startswith('run')]
    _runs_combinations = [ x for x in (itertools.combinations(_runs, 2)) if x[0] != x[1]]
    with open (os.path.join(_site_dir, 'pairwise_normalized.txt'), 'w') as _f:
        for _run_no_pair in _runs_combinations:
            _analysis_dir1 = os.path.join(_site_dir, _run_no_pair[0] + '/analysis')
            _analysis_dir2= os.path.join(_site_dir, _run_no_pair[1] + '/analysis')
            if len(os.listdir(_analysis_dir1)) > 0 and len(os.listdir(_analysis_dir2)):
                _analysis_file1 = os.path.join(_analysis_dir1, os.listdir(_analysis_dir1)[0])
                _analysis_file2 = os.path.join(_analysis_dir2, os.listdir(_analysis_dir2)[0])
            else:
                continue
            cur_ratio = find_similarity_ratio(_analysis_file1, _analysis_file2) 
            if cur_ratio:
                _f.write(str( _run_no_pair[0]) + '\t' + str(_run_no_pair[1]) + '\t' + str(cur_ratio) + '\n')
   
